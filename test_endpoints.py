"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API endpoints
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python test_endpoints.py [BASE_URL]
–ü—Ä–∏–∫–ª–∞–¥: python test_endpoints.py http://20.123.45.67:5000
"""

import requests
import json
import sys
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    END = '\033[0m'

def print_success(message):
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")

def print_error(message):
    print(f"{Colors.RED}‚ùå {message}{Colors.END}")

def print_info(message):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.END}")

def print_warning(message):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")

def test_endpoint(base_url, endpoint, method='GET', data=None, description=""):
    """–¢–µ—Å—Ç—É—î –æ–∫—Ä–µ–º–∏–π endpoint"""
    url = f"{base_url}{endpoint}"
    print_info(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {method} {endpoint}")
    if description:
        print(f"   –û–ø–∏—Å: {description}")
    
    try:
        if method == 'GET':
            response = requests.get(url, timeout=10)
        elif method == 'POST':
            response = requests.post(url, json=data, timeout=10)
        elif method == 'PUT':
            response = requests.put(url, json=data, timeout=10)
        elif method == 'DELETE':
            response = requests.delete(url, timeout=10)
        else:
            print_error(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥: {method}")
            return None
        
        if response.status_code in [200, 201]:
            print_success(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            try:
                data = response.json()
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, ensure_ascii=False, indent=2)[:200]}...")
            except:
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}")
            return response
        else:
            print_warning(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}")
            return response
            
    except requests.exceptions.ConnectionError:
        print_error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        return None
    except requests.exceptions.Timeout:
        print_error("–¢–∞–π–º-–∞—É—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è")
        return None
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return None

def run_tests(base_url):
    """–ó–∞–ø—É—Å–∫–∞—î –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è API"""
    print("\n" + "="*60)
    print(f"üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Hospital Management API")
    print(f"üìç URL: {base_url}")
    print(f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60 + "\n")
    
    tests_passed = 0
    tests_failed = 0
    
    # –¢–µ—Å—Ç 1: Swagger UI
    print("\nüìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Swagger UI")
    response = test_endpoint(base_url, "/swagger/", description="Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ü—ñ—î–Ω—Ç–∏ - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    print("\nüìã –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤")
    response = test_endpoint(base_url, "/api/v1/patients", description="GET –≤—Å—ñ—Ö –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 3: –õ—ñ–∫–∞—Ä—ñ - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    print("\nüìã –¢–µ—Å—Ç 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ª—ñ–∫–∞—Ä—ñ–≤")
    response = test_endpoint(base_url, "/api/v1/doctors", description="GET –≤—Å—ñ—Ö –ª—ñ–∫–∞—Ä—ñ–≤")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 4: –õ—ñ–∫–∞—Ä–Ω—ñ - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    print("\nüìã –¢–µ—Å—Ç 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ª—ñ–∫–∞—Ä–µ–Ω—å")
    response = test_endpoint(base_url, "/api/v1/hospitals", description="GET –≤—Å—ñ—Ö –ª—ñ–∫–∞—Ä–µ–Ω—å")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 5: –ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏ - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    print("\nüìã –¢–µ—Å—Ç 5: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤")
    response = test_endpoint(base_url, "/api/v1/medications", description="GET –≤—Å—ñ—Ö –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –¢–µ—Å—Ç 6: –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    print("\nüìã –¢–µ—Å—Ç 6: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
    response = test_endpoint(base_url, "/api/v1/departments", description="GET –≤—Å—ñ—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
    if response and response.status_code == 200:
        tests_passed += 1
    else:
        tests_failed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("="*60)
    total_tests = tests_passed + tests_failed
    print(f"–í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {total_tests}")
    print_success(f"–£—Å–ø—ñ—à–Ω–æ: {tests_passed}")
    if tests_failed > 0:
        print_error(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {tests_failed}")
    
    success_rate = (tests_passed / total_tests * 100) if total_tests > 0 else 0
    print(f"\nüìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate == 100:
        print_success("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print_info("–í–∞—à API –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–¥–∞—á—ñ!")
    elif success_rate >= 80:
        print_warning("\n‚ö†Ô∏è  –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏")
        print_info("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ endpoints —â–æ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
    else:
        print_error("\n‚ùå –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print_info("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä —Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
    
    print("="*60 + "\n")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) > 1:
        base_url = sys.argv[1].rstrip('/')
    else:
        print_info("URL –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é localhost:5000")
        print_info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python test_endpoints.py http://YOUR_VM_IP:5000")
        base_url = "http://localhost:5000"
    
    run_tests(base_url)
    
    print("\nüí° –ü–æ—Ä–∞–¥–∞:")
    print("   –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ Azure VM –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ:")
    print("   python test_endpoints.py http://YOUR_VM_IP:5000")
    print("\n   –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–π—Ç–µ Swagger UI:")
    print(f"   {base_url}/swagger/\n")

if __name__ == '__main__':
    main()

